/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ArticleEvent as PrismaArticleEvent } from "@prisma/client";

export class ArticleEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArticleEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.articleEvent.count(args);
  }

  async articleEvents(
    args: Prisma.ArticleEventFindManyArgs
  ): Promise<PrismaArticleEvent[]> {
    return this.prisma.articleEvent.findMany(args);
  }
  async articleEvent(
    args: Prisma.ArticleEventFindUniqueArgs
  ): Promise<PrismaArticleEvent | null> {
    return this.prisma.articleEvent.findUnique(args);
  }
  async createArticleEvent(
    args: Prisma.ArticleEventCreateArgs
  ): Promise<PrismaArticleEvent> {
    return this.prisma.articleEvent.create(args);
  }
  async updateArticleEvent(
    args: Prisma.ArticleEventUpdateArgs
  ): Promise<PrismaArticleEvent> {
    return this.prisma.articleEvent.update(args);
  }
  async deleteArticleEvent(
    args: Prisma.ArticleEventDeleteArgs
  ): Promise<PrismaArticleEvent> {
    return this.prisma.articleEvent.delete(args);
  }
}
